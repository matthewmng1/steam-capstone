{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3000\";\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"https://capstone-steam-db.onrender.com\"\n\nclass SteamDbApi {\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${SteamDbApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (e) {\n      console.error(\"API Error:\", e.response);\n      let msg = e.response.data.error.msg;\n      throw Array.isArray(msg) ? msg : [msg];\n    }\n  }\n\n  /**\n   * Individual routes\n   */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n  static async login(data) {\n    let res = await this.request(`auth/login`, data, \"post\");\n    return res.token;\n  }\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n  static async update(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n  static async getAppNames(searchTerm) {\n    let res = await this.request(\"steamApps/search\", {\n      searchTerm\n    });\n    return res;\n  }\n  static async getAppDetails(appid) {\n    let res = await this.request(`steamApps/${appid}`);\n    return res;\n  }\n  static async getFavoritedApps() {\n    let res = await this.request(`steamApps/`);\n    return res;\n  }\n  static async getAppNews(appid) {\n    let res = await this.request(`steamApps/news/${appid}`);\n    return res;\n  }\n  static async addAppToDash(appid, data) {\n    let res = await this.request(`steamApps/news/${appid}`, data, \"post\");\n    return res;\n  }\n  static async removeAppFromDash(appid, data) {\n    let res = await this.request(`steamApps/news/${appid}`, data, \"delete\");\n    return res;\n  }\n  static async getDashboardApps(userid) {\n    let res = await this.request(`steamApps/${userid}/dashboard`);\n    return res;\n  }\n}\nexport default SteamDbApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","SteamDbApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","headers","Authorization","token","params","e","error","response","msg","Array","isArray","getCurrentUser","username","res","user","login","signup","update","getAppNames","searchTerm","getAppDetails","appid","getFavoritedApps","getAppNews","addAppToDash","removeAppFromDash","getDashboardApps","userid"],"sources":["/Users/matthewng/Desktop/springboard/Capstones/Capstone-2/steam-capstone/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3000\"\n// const BASE_URL = process.env.REACT_APP_BASE_URL || \"https://capstone-steam-db.onrender.com\"\n\n\n\nclass SteamDbApi {\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {Authorization: `Bearer ${SteamDbApi.token}`};\n    const params = (method === \"get\")\n      ? data\n      : {};\n\n    try{\n      return(await axios ({ url, method, data, params, headers })).data;\n    } catch(e){\n      console.error(\"API Error:\", e.response);\n      let msg = e.response.data.error.msg;\n      throw Array.isArray(msg) ? msg : [msg];\n    }\n  }\n\n  /**\n   * Individual routes\n   */\n\n  static async getCurrentUser(username){\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  static async login(data){\n    let res = await this.request(`auth/login`, data, \"post\");\n    return res.token;\n  }\n\n  static async signup(data){\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  static async update(username, data){\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  static async getAppNames(searchTerm){\n    let res = await this.request(\"steamApps/search\", {searchTerm})\n    return res;\n  }\n\n  static async getAppDetails(appid){\n    let res = await this.request(`steamApps/${appid}`)\n    return res;\n  }\n\n  static async getFavoritedApps() {\n    let res = await this.request(`steamApps/`);\n    return res;\n  }\n\n  static async getAppNews(appid){\n    let res = await this.request(`steamApps/news/${appid}`)\n    return res;\n  }\n\n  static async addAppToDash(appid, data){\n    let res = await this.request(`steamApps/news/${appid}`, data, \"post\")\n    return res;\n  }\n\n  static async removeAppFromDash(appid, data){\n    let res = await this.request(`steamApps/news/${appid}`, data, \"delete\")\n    return res;\n  }\n\n  static async getDashboardApps(userid){\n    let res = await this.request(`steamApps/${userid}/dashboard`)\n    return res;\n  }\n}\n\nexport default SteamDbApi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}