{"ast":null,"code":"import _slicedToArray from\"/Users/matthewng/Desktop/springboard/Capstones/Capstone-2/steam-capstone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */function useLocalStorage(key){var firstValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var initialValue=localStorage.getItem(key)||firstValue;var _useState=useState(initialValue),_useState2=_slicedToArray(_useState,2),item=_useState2[0],setItem=_useState2[1];useEffect(function setKeyInLocalStorage(){console.debug(\"hooks useLocalStorage useEffect\",\"item=\",item);if(item===null){localStorage.removeItem(key);}else{localStorage.setItem(key,item);}},[key,item]);return[item,setItem];}export default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","_useState","_useState2","_slicedToArray","item","setItem","setKeyInLocalStorage","console","debug","removeItem"],"sources":["/Users/matthewng/Desktop/springboard/Capstones/Capstone-2/steam-capstone/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n"],"mappings":"8JAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAAS,CAAAC,eAAeA,CAACC,GAAG,CAAqB,IAAnB,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC7C,GAAM,CAAAG,YAAY,CAAGC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC,EAAIC,UAAU,CAE5D,IAAAO,SAAA,CAAwBX,QAAQ,CAACQ,YAAY,CAAC,CAAAI,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAvCG,IAAI,CAAAF,UAAA,IAAEG,OAAO,CAAAH,UAAA,IAEpBX,SAAS,CAAC,QAAS,CAAAe,oBAAoBA,CAAA,CAAG,CACxCC,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAE,OAAO,CAAEJ,IAAI,CAAC,CAE/D,GAAIA,IAAI,GAAK,IAAI,CAAE,CACjBL,YAAY,CAACU,UAAU,CAAChB,GAAG,CAAC,CAC9B,CAAC,IAAM,CACLM,YAAY,CAACM,OAAO,CAACZ,GAAG,CAAEW,IAAI,CAAC,CACjC,CACF,CAAC,CAAE,CAACX,GAAG,CAAEW,IAAI,CAAC,CAAC,CAEf,MAAO,CAACA,IAAI,CAAEC,OAAO,CAAC,CACxB,CAEA,cAAe,CAAAb,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}